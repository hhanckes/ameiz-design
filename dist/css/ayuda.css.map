{"version":3,"sources":["webpack:///./resources/sass/ayuda.scss","webpack:///./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAOA;EACE,6BAA4B;CAC7B;;AACD;EACE,uBAAsB;EACtB,mBAAkB;EAClB,wBAAuB;EACvB,iBAAgB;CAejB;;AC+BG;EDlDJ;IAMI,wBAAuB;IACvB,oBAAmB;GAYtB;CAbA;;AAND;EAUI,oBAAmB;EACnB,gBAAe;CAOhB;;ACgCC;EDlDJ;IAaM,gBAAe;GAKlB;CADF;;ACiCG;EDlDJ;IAgBM,gBAAe;GAElB;CAKF;;AAHD;EACE,cAAa;EACb,wCAAuC;EACvC,6BAA4B;EAC5B,uBAAsB;EACtB,mCAAkC;CACnC;;AACD;EACE,gBAAe;EACf,eAAc;CAIf;;ACiBG;EDvBJ;IAII,gBAAe;GAElB;CASA;;AARD;EACE,oBAAmB;CACpB","file":"resources/css/ayuda.css","sourcesContent":["@import \"variables\";//Custom Variables\n\n//Bootstrap Functions, Variables and Mixins\n@import \"../../node_modules/bootstrap/scss/functions\";\n@import \"../../node_modules/bootstrap/scss/variables\";\n@import \"../../node_modules/bootstrap/scss/mixins\";\n\n.ayuda-wrapper{\n  padding-top: 70px !important;\n}\n.ayuda-header{\n  background-color: #fff;\n  margin-top: -255px;\n  padding: 30px 30px 20px;\n  margin-bottom: 0;\n  @include media-breakpoint-up(md){\n    padding: 70px 50px 30px;\n    margin-bottom: 35px;\n  }\n  .page-title {\n    margin-bottom: 25px;\n    font-size: 25px;\n    @include media-breakpoint-up(sm){\n      font-size: 34px;\n    }\n    @include media-breakpoint-up(md){\n      font-size: 54px;\n    }\n  }\n}\n.faq-bg-container{\n  height: 425px;\n  background: url(\"../images/faq-bg.png\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center center;\n}\n.ayuda-subtext{\n  font-size: 16px;\n  color: #4a4a4a;\n  @include media-breakpoint-up(md){\n    font-size: 18px;\n  }\n}\n.left-side{\n  margin-bottom: 20px;\n}\n\n\n// WEBPACK FOOTER //\n// ./resources/sass/ayuda.scss","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourceRoot":""}